The root cause of CVE-2018-13785 is a poor calculation of `row_factor` in the `png_check_chunk_length` function within the file `pngrutil.c` in the libpng version 1.6.34. This flawed calculation could lead to an integer overflow when processing maliciously crafted PNG files, and the overflow could subsequently result in a division-by-zero error. This type of error typically leads to a crash, effectively constituting a Denial of Service (DoS) vulnerability.

The issue stems from the way `row_factor` was originally calculated, without adequately considering the possibility of an integer overflow. The calculation did not properly account for the potential size of the variables involved, given that `png_ptr->width`, `png_ptr->channels`, and `png_ptr->bit_depth` could all contribute to generating a value that exceeds the capacity of the variable meant to store the result. Particularly, multiplying these values directly, as done in the original code, could lead to an overflow before the result is assigned to `row_factor`. 

Moreover, the check `if (png_ptr->height > PNG_UINT_32_MAX/row_factor)` was supposed to prevent overflows by limiting the `idat_limit`, but the issue with the overflow in `row_factor` itself was not addressed here. This flaw indicates that careful consideration wasn't given to how large the involved variables could become in relation to each other and the types used to store their results.

The patch fixed this by explicitly casting the elements of the calculation to `size_t` before performing the arithmetic operations, ensuring that the calculation has enough space to accommodate the larger result without overflowing. By fixing the calculation of `row_factor` in this way, the patch prevents the integer overflow and the subsequent divide-by-zero error, mitigating the denial of service vulnerability. 

This case underscores the importance of careful type selection and bounds checking when performing arithmetic operations in software development, especially in scenarios where external input could influence the values being calculated.