The root cause of CVE-2018-13785 in libpng 1.6.34 is related to the incorrect calculation of `row_factor` in the `png_check_chunk_length` function found in `pngrutil.c`. Specifically, the issue arises from an arithmetic operation that could lead to an integer overflow, and as a consequence, a divide-by-zero error when processing a specifically crafted PNG file. This scenario could potentially enable a denial of service attack (DoS).

In the original calculation of `row_factor`, the operations were conducted in a manner that did not properly account for potential overflows. The calculation involved multiplying the image width (`png_ptr->width`), the number of channels (`png_ptr->channels`), and a factor determined by the bit depth (`png_ptr->bit_depth > 8? 2: 1`), then adding constants related to whether the image is interlaced.

The patch addresses this issue by ensuring that each operand involved in the calculation of `row_factor` is cast to `size_t`, a type capable of holding the result of memory size calculations, before performing the arithmetic operations. This approach reduces the risk of integer overflow. Moreover, it imposes a check to compare the calculated `row_factor` against the maximum value that a 32-bit integer can hold, adjusting `idat_limit` accordingly to prevent an overflow and divide-by-zero condition.

In essence, the root cause of the vulnerability is tied to the improper handling of arithmetic operations that involve image properties, which, when manipulated, can lead to dangerous overflow conditions. The patch corrects this by enforcing type safety and preemptively addressing potential overflows through proper casting and conditional checks.