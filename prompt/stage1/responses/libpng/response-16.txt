The root cause of CVE-2018-13785 in libpng 1.6.34, based on the provided information, stems from an incorrect calculation of `row_factor` in the `png_check_chunk_length` function within `pngrutil.c`. This miscalculation can lead to an integer overflow that subsequently causes a divide-by-zero error when processing specially crafted PNG files, ultimately resulting in a denial of service (DoS).

The integer overflow occurs because the original code does not properly handle the size of the variables involved in the calculation of `row_factor`. `row_factor` is calculated based on several properties of a PNG image, including its width, bit depth, and whether it is interlaced. Specifically, the calculation did not ensure that the multiplication involving `png_ptr->width`, `png_ptr->channels`, and a conditional factor based on `png_ptr->bit_depth` would not exceed the bounds of the integer type used for `row_factor`.

The patch addresses this issue by casting each of the operands in the problematic calculation to `size_t` before performing the multiplication. This ensures that the multiplication happens in a larger integer space, preventing the overflow. Furthermore, the logic adjusted to better check and limit the calculated `row_factor`. This more careful calculation and consideration of variable sizes and limits mitigates the risk of the integer overflow and subsequent divide-by-zero error, thereby preventing the denial of service vulnerability that was present in the original code.

Hence, the root cause is essentially an improper calculation that did not account for bound or type limits, leading to unchecked overflow conditions and a lack of error handling for such overflow scenarios. The patch rectifies these issues by correctly casting and checking variable sizes and limits.