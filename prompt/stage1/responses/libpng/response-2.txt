Based on the patch provided for CVE-2018-13785, the root cause of the vulnerability appears to be an incorrect calculation of `row_factor` in the function `png_check_chunk_length` within `pngrutil.c` in libpng version 1.6.34. The incorrect calculation could lead to an integer overflow, which, when used in subsequent operations, results in a divide-by-zero error. This error condition could then lead to a denial of service (DoS) when processing a crafted PNG file.

In the original implementation, `row_factor` was computed without explicitly casting the operands to a larger integer size before performing arithmetic operations. As a result, when dealing with large values of `png_ptr->width`, `png_ptr->channels`, and `png_ptr->bit_depth`, the multiplication could overflow the size of a `size_t` (or the type used for the calculation), leading to an integer overflow. This overflow wasn't adequately handled or anticipated, resulting in erroneous, possibly zero or very small, values being used in operations that depend on `row_factor`.

The patch addresses this issue by explicitly casting `png_ptr->width`, `png_ptr->channels`, and the result of the `png_ptr->bit_depth` conditional check to `size_t` before performing the multiplication. This ensures that the arithmetic operation has sufficient space to represent its result without overflowing. Following this operation, the code includes more robust checks to prevent divide-by-zero and other related errors.

In summary, the root cause of CVE-2018-13785 was an oversight in the calculation of `row_factor` within `png_check_chunk_length`, specifically, not accounting for the possibility of integer overflow during multiplication operations. This was resolved by ensuring proper data type casting and handling for arithmetic operations to prevent overflow, alongside improved validation to handle resultant values safely.