The root cause of CVE-2018-13785 in libpng 1.6.34 stems from an incorrect calculation of `row_factor` in the `png_check_chunk_length` function, as outlined in the provided code snippet. This erroneous calculation could lead to an integer overflow, which, under certain conditions, might result in a divide-by-zero error when processing specially crafted PNG files, ultimately leading to a Denial of Service (DoS) attack.

The primary issues leading to this vulnerability include:

1. **Improper calculation of `row_factor`:** Before the patch, the calculation of `row_factor` did not properly account for potential integer overflow. The multiplication of `png_ptr->width`, `png_ptr->channels`, and a conditional factor based on `png_ptr->bit_depth` could exceed the maximum value capable of being stored in a `size_t` data type when processing maliciously crafted images. This overflow could then influence subsequent calculations leading to undefined behavior or crashes.

2. **Integer Overflow:** An integer overflow occurs when an arithmetic operation attempts to create a numeric value that is outside of the range that can be represented with a given number of digits. In this case, the overflow arises from the calculation of `row_factor` when the values of `png_ptr->width`, `png_ptr->channels`, and `png_ptr->bit_depth` are manipulated to produce a value that exceeds the storage capacity of the data type.

3. **Resultant Divide-by-Zero:** A divide-by-zero condition is a result of the integer overflow when the calculated `idat_limit` becomes zero due to the overflowed `row_factor`, leading to situations where division or modulus operations with `idat_limit` as the divisor could trigger runtime errors. Divide-by-zero is a common critical vulnerability that can be exploited to cause a program to crash, leading to a Denial of Service.

The patch corrects this issue by ensuring that the calculation of `row_factor` is performed with carefully casted size_t types to prevent integer overflow. By doing so, it makes sure that the calculation respects the bounds of what can be correctly stored in a `size_t` type, thus avoiding the overflow and ensuring that subsequent calculations behave as expected. This fix directly addresses the improper handling of specially crafted PNG files that could previously exploit the vulnerability to cause a denial of service.