The root cause of CVE-2018-13785 is an incorrect calculation of `row_factor` in the `png_check_chunk_length` function from the `pngrutil.c` file within libpng (version 1.6.34). This incorrect calculation could lead to an integer overflow, which, under certain conditions, would result in a divide-by-zero error when processing specially crafted PNG files, thereby causing a denial of service (DoS).

The specific issue stems from the way `row_factor` was calculated before the patch. The calculation did not properly cast the variables to a large enough data type to hold values that could result from very large or carefully crafted dimensions (width, bit depth, etc.) of a PNG file. When these large values are multiplied together, they could exceed the capacity of the data type that was originally used, leading to an integer overflow. This overflow, in turn, could lead to situations where the calculation of `idat_limit` or other subsequent calculations divide by zero, as the overflowed value could incorrectly be used in contexts where such a value is unexpected and unhandled.

The patch addresses this by explicitly casting the operands of the calculation to `size_t`, a data type large enough to hold the result of the multiplication without overflowing, before performing the operations. By ensuring that the calculation is done using a sufficiently large data type, the patch prevents the integer overflow and the subsequent divide-by-zero error, mitigating the DoS vulnerability.

This change highlights the importance of carefully considering the data types used in calculations that involve potentially large numbers, particularly those numbers derived from external inputs that could be crafted to exploit weaknesses in type management. Ensuring that calculations are done in a type-safe manner is a key practice in preventing these kinds of vulnerabilities.