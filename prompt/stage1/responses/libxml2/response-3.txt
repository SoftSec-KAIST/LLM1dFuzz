The root cause of CVE-2017-9047 is a buffer overflow vulnerability in the libxml2 library. The specific function affected is `xmlSnprintfElementContent` within the `valid.c` source file. This function is designed to recursively dump the element content definition into a character buffer named `buf` of a specified size `size`. 

1. **Incorrect Buffer Length Management:** The primary issue lies in the management of the buffer length during the concatenation of strings to the buffer. The function uses a variable named `len`, which is assigned the initial length of the buffer with `strlen(buf)`. As the function appends additional content (`content->prefix` and `content->name`) to the buffer, it fails to update or re-calculate `len` to reflect the new length of the buffer after each concatenation. Instead, it checks whether the new content would fit in the buffer based on the outdated `len` value. This oversight means that when checking if there's enough space to append `content->name`, it's using the length of the buffer before appending `content->prefix`, potentially leading to writing beyond the allocated memory if the combined length of the prefix and name exceeds the buffer size.

2. **Insufficient Buffer Space Checks:** The function did not properly ensure that there would be sufficient space in the buffer for additional characters that might be added alongside `content->prefix` and `content->name` (such as a colon and potential padding). The checks done were insufficient and did not account for all scenarios where the buffer could overflow, especially when considering additional characters that are appended beyond just the prefix and name.

The patch addresses these issues by:
- Introducing a new variable `qnameLen` that calculates the combined length of `content->prefix`, `content->name`, and an additional character (`:`) if the prefix is not null. This calculation happens before attempting to append these elements to the buffer.
- Changing the space checks to use this combined length (`qnameLen`) and an additional buffer space requirement (`+10`) to determine if appending the new content would exceed the buffer size. If it would, the function adds an ellipsis `" ..."` and returns early to prevent buffer overflow.
- This approach ensures that the function correctly handles buffer size limitations and prevents overflowing the buffer by writing beyond its allocated memory.

In summary, the root cause was inadequate checks for buffer space before appending strings, leading to potential buffer overflow scenarios. The patch effectively addresses these issues by introducing more accurate checks that account for the actual space required before modifications to the buffer are made.