The root cause of CVE-2017-9047 lies in the improper buffer size checks in the `xmlSnprintfElementContent` function within libxml2's valid.c file. This function is tasked with recursively dumping the element content definition into a character buffer `buf` of a specified size `size`. The vulnerability stems from the code's failure to accurately recalculate the available space in the buffer after appending strings to it. Specifically, the error occurs when processing element content names and prefixes. 

Originally, the function utilized the `len` variable, assigned the value from `strlen(buf)`, to determine if there was enough room left in the buffer to append the content's prefix and name. However, after appending any string to `buf`, it didn't recalculate the length of `buf` before checking if there was enough space to append additional strings. This oversight meant that the check for buffer overflow was based on stale data (the length of `buf` before appending the last string), leading to a scenario where the function could append more data to `buf` than it could hold, causing a buffer overflow. This buffer overflow could result in memory corruption, causing applications that depend on libxml2, such as PHP, to crash, and potentially be exploited to execute arbitrary code.

The patch corrects this vulnerability by updating these checks. It introduces a new `qnameLen` variable that calculates the combined length of a content's name and prefix (and a colon character if a prefix exists) before any concatenation operations. It then compares `qnameLen` with the available space in the buffer (`size - len`) to ensure there's enough room before appending any strings. This method effectively prevents the overflow by ensuring that the buffer's boundaries are respected, mitigating the risk of writing beyond the allocated memory for `buf`.